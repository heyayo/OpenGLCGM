cmake_minimum_required(VERSION 3.0.0)
project(OpenGLFramework VERSION 1.0.0)

set(CMAKE_CXX_STANDARD 11)
if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    set(CMAKE_EXE_LINKER_FLAGS "-lGL -lGLU -lX11 -lXxf86vm -lXrandr -lpthread -lXi")
elseif (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set(CMAKE_EXE_LINKER_FLAGS /NODEFAULTLIB:library)
endif()
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR})
set(CMAKE_GENERATOR_PLATFORM x64)

file(GLOB COMMON Common/*.cpp)
file(GLOB L_LIB ${CMAKE_SOURCE_DIR}/lib/*.a)
set(W_LIB ${CMAKE_SOURCE_DIR}/lib/glfw3.lib ${CMAKE_SOURCE_DIR}/lib/glew32s.lib)
set(SOURCE Application.cpp Camera.cpp Mesh.cpp MeshBuilder.cpp Scene1.cpp shader.cpp RenderMan.cpp)

add_library(CommonLib ${COMMON})
add_executable(RunFile main.cpp ${SOURCE})

target_include_directories(CommonLib PUBLIC ${CMAKE_SOURCE_DIR}/Common)
target_include_directories(RunFile PUBLIC ${CMAKE_SOURCE_DIR}/Common)
target_include_directories(RunFile PUBLIC ${CMAKE_SOURCE_DIR})
target_link_libraries(RunFile PUBLIC CommonLib)
if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    target_link_libraries(CommonLib PRIVATE ${L_LIB})
    target_link_libraries(RunFile PRIVATE ${L_LIB})
elseif (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    target_link_libraries(CommonLib PRIVATE ${W_LIB})
    target_link_libraries(RunFile PRIVATE ${W_LIB})
endif()
